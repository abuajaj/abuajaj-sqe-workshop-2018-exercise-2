import assert from 'assert';
import {parseCode} from '../src/js/code-analyzer';
import Substitution from '../src/js/substitution';

describe('The javascript substitution', () => {
    it('is parsing an empty function correctly', () => {
        assert.equal(
            JSON.stringify(parseCode('')),
            '{"type":"Program","body":[],"sourceType":"script"}'
        );
    });

    it('is parsing a simple variable declaration correctly', () => {
        assert.equal(
            JSON.stringify(parseCode('let a = 1;')),
            '{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"a"},"init":{"type":"Literal","value":1,"raw":"1"}}],"kind":"let"}],"sourceType":"script"}'
        );
    });
});

describe('The substitution 1', () => {
    it('is substitute global variables correctly', () => {
        let substitution = new Substitution('let w = 1;', []);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"VariableDeclaration","title":"w","condition":"","value":"1","kind":"global","variableKind":"let","childreen":[]}]');
    });
    it('is substitute if correctly', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;}}', []);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"}]}]');
    });
    it('is substitute if - else correctly', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', []);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"},{"line":8,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}],"color":"green"}]}]');
    });
});

describe('The substitution 2', () => {
    it('is substitute if - else if - else correctly', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else if (b < z * 2) {c = c + x + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', []);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"},{"line":8,"type":"ElseIfStatement","title":"else if","condition":"b < z * 2","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + x + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + x + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + x + 5)"}],"substitution":"((x + 1) + y) < z * 2","color":"red"},{"line":11,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":12,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":13,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}],"color":"green"}]}]');
    });
    it('is substitute while correctly', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;while (a < z) {c = a + b;z = c * 2;}return z;}', []);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"WhileStatement","title":"while","condition":"a < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"a + b","kind":"","variableKind":"","childreen":[],"substitution":"(x + 1) + ((x + 1) + y)"},{"line":7,"type":"AssignmentExpression","title":"z","condition":"","value":"c * 2","kind":"","variableKind":"","childreen":[],"substitution":"((x + 1) + ((x + 1) + y)) * 2"}],"substitution":"(x + 1) < z","color":"red"},{"line":8,"type":"ReturnStatement","title":"return","condition":"","value":"z","kind":"","variableKind":"","childreen":[],"substitution":"z"}]}]');
    });
});

describe('The evaluation 1', () => {
    it('is evaluate if (FALSE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;}}', [1,2,3]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"}]}]');
    });
    it('is evaluate if (TRUE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;}}', [1,1,4]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"green"}]}]');
    });
});

describe('The evaluation 2', () => {
    it('is substitute if - else (FALSE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', [1,2,3]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"},{"line":8,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}],"color":"green"}]}]');
    });
    it('is substitute if - else (TRUE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', [1,2,5]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"green"},{"line":8,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}]}]}]');
    });
});

describe('The evaluation 3', () => {
    it('is substitute if - else if - else (FALSE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else if (b < z * 2) {c = c + x + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', [0,5,1]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"},{"line":8,"type":"ElseIfStatement","title":"else if","condition":"b < z * 2","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + x + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + x + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + x + 5)"}],"substitution":"((x + 1) + y) < z * 2","color":"red"},{"line":11,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":12,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":13,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}],"color":"green"}]}]');
    });
    it('is substitute if - else if - else (TRUE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;if (b < z) {c = c + 5;return x + y + z + c;} else if (b < z * 2) {c = c + x + 5;return x + y + z + c;} else {c = c + z + 5;return x + y + z + c;}}', [0,1,2]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"IfStatement","title":"if","condition":"b < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"c + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + 5"},{"line":7,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + 5"}],"substitution":"((x + 1) + y) < z","color":"red"},{"line":8,"type":"ElseIfStatement","title":"else if","condition":"b < z * 2","value":"","kind":"","variableKind":"","childreen":[{"line":9,"type":"AssignmentExpression","title":"c","condition":"","value":"c + x + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + x + 5"},{"line":10,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + x + 5)"}],"substitution":"((x + 1) + y) < z * 2","color":"green"},{"line":11,"type":"Else","title":"else","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":12,"type":"AssignmentExpression","title":"c","condition":"","value":"c + z + 5","kind":"","variableKind":"","childreen":[],"substitution":"0 + z + 5"},{"line":13,"type":"ReturnStatement","title":"return","condition":"","value":"x + y + z + c","kind":"","variableKind":"","childreen":[],"substitution":"x + y + z + (0 + z + 5)"}]}]}]');
    });
    it('is substitute while (TRUE)', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;while (a < z) {c = a + b;z = c * 2;}return z;}', [0,1,2]);
        substitution.build();
        assert.equal(JSON.stringify(substitution.nodes), '[{"line":1,"type":"FunctionDeclaration","title":"function foo(x, y, z)","condition":"","value":"","kind":"","variableKind":"","childreen":[{"line":1,"type":"VariableDeclaration","title":"x","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"y","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":1,"type":"VariableDeclaration","title":"z","condition":"","value":"","kind":"argument","variableKind":"","childreen":[]},{"line":2,"type":"VariableDeclaration","title":"a","condition":"","value":"x + 1","kind":"local","variableKind":"let","childreen":[]},{"line":3,"type":"VariableDeclaration","title":"b","condition":"","value":"a + y","kind":"local","variableKind":"let","childreen":[]},{"line":4,"type":"VariableDeclaration","title":"c","condition":"","value":"0","kind":"local","variableKind":"let","childreen":[]},{"line":5,"type":"WhileStatement","title":"while","condition":"a < z","value":"","kind":"","variableKind":"","childreen":[{"line":6,"type":"AssignmentExpression","title":"c","condition":"","value":"a + b","kind":"","variableKind":"","childreen":[],"substitution":"(x + 1) + ((x + 1) + y)"},{"line":7,"type":"AssignmentExpression","title":"z","condition":"","value":"c * 2","kind":"","variableKind":"","childreen":[],"substitution":"((x + 1) + ((x + 1) + y)) * 2"}],"substitution":"(x + 1) < z","color":"green"},{"line":8,"type":"ReturnStatement","title":"return","condition":"","value":"z","kind":"","variableKind":"","childreen":[],"substitution":"z"}]}]');
    });
});

describe('Render', () => {
    it('is check html render correctly', () => {
        let substitution = new Substitution('function foo(x, y, z){let a = x + 1;let b = a + y;let c = 0;while (a < z) {c = a + b;z = c * 2;}return z;}', [0,1,2]);
        substitution.build();
        assert.equal(substitution.render(), '<pre>function foo(x, y, z) {<br>&#09;<span class="green">while((x + 1) < z)</span> {<br>&#09;&#09;z = ((x + 1) + ((x + 1) + y)) * 2;<br><br>&#09;}<br>&#09;return z;<br>}<br></pre>');
    });
});
